(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

// Home Preview Analysis Component JavaScript - Animations & Interactivity Only

$(document).ready(function () {
  initializeHomePreview();
});
function initializeHomePreview() {
  // Initialize tab functionality
  initializePreviewTabs();

  // Initialize progress bar animations
  initializeProgressBars();

  // Initialize score circle animations
  initializeScoreCircles();

  // Format timestamps
  formatTimestamps();
}

// Initialize tab switching functionality
function initializePreviewTabs() {
  var $tabs = $('.preview-tabs .tab');
  var $tabContents = $('.tab-content');

  // Set the first tab as active by default
  $($tabs[0]).addClass('active');
  $($tabs[0]).attr('aria-selected', 'true');
  $($tabContents[0]).addClass('active');
  $tabs.on('click', function () {
    var analysisType = $(this).data('analysis');

    // Update tab states
    $tabs.removeClass('active').attr('aria-selected', 'false');
    $(this).addClass('active').attr('aria-selected', 'true');

    // Update content visibility
    $tabContents.removeClass('active');
    $("#".concat(analysisType, "-content")).addClass('active');

    // Animate progress bars for the new tab
    setTimeout(function () {
      animateProgressBars($("#".concat(analysisType, "-content")));
    }, 100);

    // Animate score circle
    animateScoreCircle($("#".concat(analysisType, "-content")));
  });

  // Keyboard navigation for tabs
  $tabs.on('keydown', function (e) {
    var $currentTab = $(this);
    var $targetTab;
    switch (e.key) {
      case 'ArrowRight':
        e.preventDefault();
        $targetTab = $currentTab.next('.tab').length ? $currentTab.next('.tab') : $('.tab').first();
        break;
      case 'ArrowLeft':
        e.preventDefault();
        $targetTab = $currentTab.prev('.tab').length ? $currentTab.prev('.tab') : $('.tab').last();
        break;
      case 'Home':
        e.preventDefault();
        $targetTab = $('.tab').first();
        break;
      case 'End':
        e.preventDefault();
        $targetTab = $('.tab').last();
        break;
      default:
        return;
    }
    if ($targetTab) {
      $targetTab.focus().click();
    }
  });
}

// Initialize progress bar animations
function initializeProgressBars() {
  // Set initial width to 0
  $('.progress-fill[data-width]').css('width', '0%');

  // Create intersection observer for scroll-triggered animations
  var observer = new IntersectionObserver(function (entries) {
    entries.forEach(function (entry) {
      if (entry.isIntersecting) {
        // Animate the active tab's progress bars
        var $activeTabContent = $('.tab-content.active');
        animateProgressBars($activeTabContent);
        observer.unobserve(entry.target);
      }
    });
  }, {
    threshold: 0.5
  });

  // Observe the analysis preview container
  var previewElement = document.getElementById('analysisPreview');
  if (previewElement) {
    observer.observe(previewElement);
  }
}

// Animate progress bars within a container
function animateProgressBars($container) {
  var $progressBars = $container.find('.progress-fill[data-width]');
  $progressBars.each(function (index) {
    var $bar = $(this);
    var targetWidth = $bar.data('width');
    setTimeout(function () {
      $bar.css('width', targetWidth);
    }, index * 150); // Stagger animations
  });
}

// Initialize score circle animations
function initializeScoreCircles() {
  $('.score-circle[data-score]').each(function () {
    var $circle = $(this);
    var score = parseInt($circle.data('score'));

    // Set initial state
    $circle.find('.score-value').text('0%');

    // Set up for animation on scroll
    updateScoreCircleColor($circle, score);
  });

  // Animate the active score circle on page load
  setTimeout(function () {
    var $activeTabContent = $('.tab-content.active');
    animateScoreCircle($activeTabContent);
  }, 500);
}

// Animate score circle for active tab
function animateScoreCircle($tabContent) {
  var $scoreCircle = $tabContent.find('.score-circle[data-score]');
  if ($scoreCircle.length) {
    var score = parseInt($scoreCircle.data('score'));
    animateScoreNumber($scoreCircle.find('.score-value'), score);
  }
}

// Update score circle color based on score
function updateScoreCircleColor($circle, score) {
  // Remove existing color classes
  $circle.removeClass('critical high moderate low');

  // Add appropriate class based on score (high similarity = bad)
  if (score >= 90) {
    $circle.addClass('critical');
  } else if (score >= 75) {
    $circle.addClass('high');
  } else if (score >= 50) {
    $circle.addClass('moderate');
  } else {
    $circle.addClass('low');
  }
}

// Animate score number counting up
function animateScoreNumber($element, finalScore) {
  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1500;
  var startScore = 0;
  var startTime = performance.now();
  function updateScore(currentTime) {
    var elapsed = currentTime - startTime;
    var progress = Math.min(elapsed / duration, 1);
    var currentScore = Math.floor(startScore + (finalScore - startScore) * progress);
    $element.text(currentScore + '%');
    if (progress < 1) {
      requestAnimationFrame(updateScore);
    }
  }
  requestAnimationFrame(updateScore);
}

// Format timestamps to readable dates
function formatTimestamps() {
  var $timestampElements = $('[data-timestamp]');
  $timestampElements.each(function () {
    var $element = $(this);
    var timestamp = $element.data('timestamp');
    if (timestamp) {
      var date = new Date(timestamp);
      var formatted = date.toLocaleDateString('en-US', {
        month: 'short',
        day: 'numeric',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      // Only update if it's not already formatted
      if ($element.text().includes('T')) {
        $element.text(formatted);
      }
    }
  });
}

// Add hover effects to comparison items
$(document).on('mouseenter', '.comparison-item', function () {
  $(this).addClass('hovered');
});
$(document).on('mouseleave', '.comparison-item', function () {
  $(this).removeClass('hovered');
});

// Add click effects to analysis preview
$(document).on('click', '.analysis-preview', function () {
  var _this = this;
  $(this).addClass('clicked');
  setTimeout(function () {
    $(_this).removeClass('clicked');
  }, 200);
});

// Export functions for potential external use
window.homePreview = {
  animateProgressBars: animateProgressBars,
  animateScoreCircle: animateScoreCircle,
  formatTimestamps: formatTimestamps
};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
