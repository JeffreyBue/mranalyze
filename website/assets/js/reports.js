(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _regenerator() { /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e, t, r = "function" == typeof Symbol ? Symbol : {}, n = r.iterator || "@@iterator", o = r.toStringTag || "@@toStringTag"; function i(r, n, o, i) { var c = n && n.prototype instanceof Generator ? n : Generator, u = Object.create(c.prototype); return _regeneratorDefine2(u, "_invoke", function (r, n, o) { var i, c, u, f = 0, p = o || [], y = !1, G = { p: 0, n: 0, v: e, a: d, f: d.bind(e, 4), d: function d(t, r) { return i = t, c = 0, u = e, G.n = r, a; } }; function d(r, n) { for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) { var o, i = p[t], d = G.p, l = i[2]; r > 3 ? (o = l === n) && (u = i[(c = i[4]) ? 5 : (c = 3, 3)], i[4] = i[5] = e) : i[0] <= d && ((o = r < 2 && d < i[1]) ? (c = 0, G.v = n, G.n = i[1]) : d < l && (o = r < 3 || i[0] > n || n > l) && (i[4] = r, i[5] = n, G.n = l, c = 0)); } if (o || r > 1) return a; throw y = !0, n; } return function (o, p, l) { if (f > 1) throw TypeError("Generator is already running"); for (y && 1 === p && d(p, l), c = p, u = l; (t = c < 2 ? e : u) || !y;) { i || (c ? c < 3 ? (c > 1 && (G.n = -1), d(c, u)) : G.n = u : G.v = u); try { if (f = 2, i) { if (c || (o = "next"), t = i[o]) { if (!(t = t.call(i, u))) throw TypeError("iterator result is not an object"); if (!t.done) return t; u = t.value, c < 2 && (c = 0); } else 1 === c && (t = i["return"]) && t.call(i), c < 2 && (u = TypeError("The iterator does not provide a '" + o + "' method"), c = 1); i = e; } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a) break; } catch (t) { i = e, c = 1, u = t; } finally { f = 1; } } return { value: t, done: y }; }; }(r, o, i), !0), u; } var a = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} t = Object.getPrototypeOf; var c = [][n] ? t(t([][n]())) : (_regeneratorDefine2(t = {}, n, function () { return this; }), t), u = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c); function f(e) { return Object.setPrototypeOf ? Object.setPrototypeOf(e, GeneratorFunctionPrototype) : (e.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine2(e, o, "GeneratorFunction")), e.prototype = Object.create(u), e; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype), _regeneratorDefine2(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"), _regeneratorDefine2(u), _regeneratorDefine2(u, o, "Generator"), _regeneratorDefine2(u, n, function () { return this; }), _regeneratorDefine2(u, "toString", function () { return "[object Generator]"; }), (_regenerator = function _regenerator() { return { w: i, m: f }; })(); }
function _regeneratorDefine2(e, r, n, t) { var i = Object.defineProperty; try { i({}, "", {}); } catch (e) { i = 0; } _regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) { if (r) i ? i(e, r, { value: n, enumerable: !t, configurable: !t, writable: !t }) : e[r] = n;else { var o = function o(r, n) { _regeneratorDefine2(e, r, function (e) { return this._invoke(r, n, e); }); }; o("next", 0), o("throw", 1), o("return", 2); } }, _regeneratorDefine2(e, r, n, t); }
function asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }
function _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, "next", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, "throw", n); } _next(void 0); }); }; }
/* filepath: /Users/jeffbue/TCG_SITES/SEO-TEAM/mranalyze.com/website/src/assets/js/reports.js */
document.addEventListener('DOMContentLoaded', function () {
  var dialog = document.getElementById('archive-dialog');
  var dialogReportId = document.getElementById('dialog-report-id');
  var confirmBtn = document.getElementById('confirm-archive-btn');
  var cancelBtn = document.getElementById('cancel-archive-btn');
  var reportItems = document.querySelectorAll('.report-item');
  var reportToArchive = null;
  var checkboxToUncheck = null;
  var showDialog = function showDialog(reportId, checkbox) {
    reportToArchive = reportId;
    checkboxToUncheck = checkbox;
    dialogReportId.textContent = reportId;
    dialog.style.display = 'flex';
  };
  var hideDialog = function hideDialog() {
    if (checkboxToUncheck) {
      checkboxToUncheck.checked = false;
    }
    dialog.style.display = 'none';
    reportToArchive = null;
    checkboxToUncheck = null;
  };
  var archiveReport = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee() {
      var reportId, reportElement, response, result, _t;
      return _regenerator().w(function (_context) {
        while (1) switch (_context.n) {
          case 0:
            if (reportToArchive) {
              _context.n = 1;
              break;
            }
            return _context.a(2);
          case 1:
            reportId = reportToArchive;
            reportElement = document.querySelector(".report-item[data-report-id=\"".concat(reportId, "\"]"));
            _context.p = 2;
            _context.n = 3;
            return fetch("/api/analysis/report/".concat(reportId), {
              method: 'DELETE'
            });
          case 3:
            response = _context.v;
            _context.n = 4;
            return response.json();
          case 4:
            result = _context.v;
            if (response.ok) {
              console.log('Archive successful:', result.message);
              if (reportElement) {
                reportElement.classList.add('archiving');
                // Remove the element after the animation completes
                reportElement.addEventListener('animationend', function () {
                  reportElement.nextElementSibling.remove(); // remove <br/>
                  reportElement.remove();
                });
              }
            } else {
              console.error('Archive failed:', result.message);
              alert("Error: ".concat(result.message));
            }
            _context.n = 6;
            break;
          case 5:
            _context.p = 5;
            _t = _context.v;
            console.error('An error occurred:', _t);
            alert('An unexpected error occurred while archiving the report.');
          case 6:
            _context.p = 6;
            hideDialog();
            return _context.f(6);
          case 7:
            return _context.a(2);
        }
      }, _callee, null, [[2, 5, 6, 7]]);
    }));
    return function archiveReport() {
      return _ref.apply(this, arguments);
    };
  }();
  reportItems.forEach(function (item) {
    var checkbox = item.querySelector('.archive-checkbox');
    if (checkbox) {
      checkbox.addEventListener('change', function (e) {
        if (e.target.checked) {
          var reportId = item.dataset.reportId;
          showDialog(reportId, e.target);
        }
      });
    }
  });
  confirmBtn.addEventListener('click', archiveReport);
  cancelBtn.addEventListener('click', hideDialog);

  // Also hide dialog if clicking on the overlay
  dialog.addEventListener('click', function (e) {
    if (e.target === dialog) {
      hideDialog();
    }
  });
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvYXNzZXRzL2pzcmMvcmVwb3J0cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OzBCQ0NBLHVLQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSx3QkFBQSxNQUFBLEdBQUEsTUFBQSxPQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsUUFBQSxrQkFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLFdBQUEsOEJBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsU0FBQSxZQUFBLFNBQUEsR0FBQSxDQUFBLEdBQUEsU0FBQSxFQUFBLENBQUEsR0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxTQUFBLFVBQUEsbUJBQUEsQ0FBQSxDQUFBLHVCQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsQ0FBQSxRQUFBLENBQUEsT0FBQSxDQUFBLEtBQUEsQ0FBQSxLQUFBLENBQUEsS0FBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxNQUFBLENBQUEsV0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLFdBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLE1BQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLENBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLGdCQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsU0FBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxPQUFBLENBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxJQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsTUFBQSxFQUFBLENBQUEsVUFBQSxDQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxHQUFBLENBQUEsS0FBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsS0FBQSxDQUFBLE1BQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLEdBQUEsQ0FBQSxZQUFBLENBQUEsV0FBQSxDQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsSUFBQSxDQUFBLE9BQUEsQ0FBQSxNQUFBLENBQUEsR0FBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsUUFBQSxDQUFBLE1BQUEsQ0FBQSxDQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsR0FBQSxDQUFBLE9BQUEsQ0FBQSxHQUFBLENBQUEsS0FBQSxDQUFBLEdBQUEsQ0FBQSxRQUFBLENBQUEsTUFBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsTUFBQSxDQUFBLE1BQUEsQ0FBQSxFQUFBLENBQUEsTUFBQSxDQUFBLEVBQUEsQ0FBQSxDQUFBLENBQUEsR0FBQSxDQUFBLEVBQUEsQ0FBQSxjQUFBLENBQUEsSUFBQSxDQUFBLGFBQUEsQ0FBQSxRQUFBLENBQUEsT0FBQSxDQUFBLHFCQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsWUFBQSxTQUFBLHVDQUFBLENBQUEsVUFBQSxDQUFBLElBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsRUFBQSxDQUFBLEdBQUEsQ0FBQSxHQUFBLENBQUEsR0FBQSxDQUFBLE9BQUEsQ0FBQSxHQUFBLENBQUEsTUFBQSxDQUFBLEtBQUEsQ0FBQSxLQUFBLENBQUEsR0FBQSxDQUFBLFFBQUEsQ0FBQSxTQUFBLENBQUEsQ0FBQSxDQUFBLFFBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLEtBQUEsQ0FBQSxDQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsR0FBQSxDQUFBLGFBQUEsQ0FBQSxNQUFBLENBQUEsUUFBQSxDQUFBLEtBQUEsQ0FBQSxZQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsQ0FBQSxXQUFBLENBQUEsR0FBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsRUFBQSxDQUFBLFVBQUEsU0FBQSwyQ0FBQSxDQUFBLENBQUEsSUFBQSxTQUFBLENBQUEsRUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLEtBQUEsRUFBQSxDQUFBLFNBQUEsQ0FBQSxvQkFBQSxDQUFBLEtBQUEsQ0FBQSxHQUFBLENBQUEsZUFBQSxDQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLFNBQUEsQ0FBQSxHQUFBLFNBQUEsdUNBQUEsQ0FBQSxnQkFBQSxDQUFBLE9BQUEsQ0FBQSxHQUFBLENBQUEsY0FBQSxDQUFBLElBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsT0FBQSxDQUFBLGtCQUFBLENBQUEsSUFBQSxDQUFBLEdBQUEsQ0FBQSxFQUFBLENBQUEsTUFBQSxDQUFBLEdBQUEsQ0FBQSxjQUFBLENBQUEsbUJBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxJQUFBLEVBQUEsQ0FBQSxTQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsUUFBQSxDQUFBLGdCQUFBLFVBQUEsY0FBQSxrQkFBQSxjQUFBLDJCQUFBLEtBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLE1BQUEsQ0FBQSxNQUFBLENBQUEsSUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsU0FBQSxtQkFBQSxDQUFBLENBQUEsT0FBQSxDQUFBLGlDQUFBLENBQUEsR0FBQSxDQUFBLEdBQUEsMEJBQUEsQ0FBQSxTQUFBLEdBQUEsU0FBQSxDQUFBLFNBQUEsR0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsWUFBQSxFQUFBLENBQUEsV0FBQSxNQUFBLENBQUEsY0FBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLENBQUEsQ0FBQSxFQUFBLDBCQUFBLEtBQUEsQ0FBQSxDQUFBLFNBQUEsR0FBQSwwQkFBQSxFQUFBLG1CQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEseUJBQUEsQ0FBQSxDQUFBLFNBQUEsR0FBQSxNQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsR0FBQSxDQUFBLFdBQUEsaUJBQUEsQ0FBQSxTQUFBLEdBQUEsMEJBQUEsRUFBQSxtQkFBQSxDQUFBLENBQUEsaUJBQUEsMEJBQUEsR0FBQSxtQkFBQSxDQUFBLDBCQUFBLGlCQUFBLGlCQUFBLEdBQUEsaUJBQUEsQ0FBQSxXQUFBLHdCQUFBLG1CQUFBLENBQUEsMEJBQUEsRUFBQSxDQUFBLHdCQUFBLG1CQUFBLENBQUEsQ0FBQSxHQUFBLG1CQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsZ0JBQUEsbUJBQUEsQ0FBQSxDQUFBLEVBQUEsQ0FBQSxpQ0FBQSxtQkFBQSxDQUFBLENBQUEsOERBQUEsWUFBQSxZQUFBLGFBQUEsYUFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBO0FBQUEsU0FBQSxvQkFBQSxDQUFBLEVBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLFFBQUEsQ0FBQSxHQUFBLE1BQUEsQ0FBQSxjQUFBLFFBQUEsQ0FBQSx1QkFBQSxDQUFBLElBQUEsQ0FBQSxRQUFBLG1CQUFBLFlBQUEsbUJBQUEsQ0FBQSxFQUFBLENBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxRQUFBLENBQUEsRUFBQSxDQUFBLEdBQUEsQ0FBQSxDQUFBLENBQUEsRUFBQSxDQUFBLElBQUEsS0FBQSxFQUFBLENBQUEsRUFBQSxVQUFBLEdBQUEsQ0FBQSxFQUFBLFlBQUEsR0FBQSxDQUFBLEVBQUEsUUFBQSxHQUFBLENBQUEsTUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQUEsWUFBQSxDQUFBLFlBQUEsRUFBQSxDQUFBLEVBQUEsQ0FBQSxJQUFBLG1CQUFBLENBQUEsQ0FBQSxFQUFBLENBQUEsWUFBQSxDQUFBLGdCQUFBLE9BQUEsQ0FBQSxDQUFBLEVBQUEsQ0FB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VUFBQTtZQUFBLE9BQUEsUUFBQSxDQUFBLENBQUE7UUFBQTtNQUFBLEdBQUEsT0FBQTtJQUFBLENBRXBCO0lBQUEsZ0JBakNLLGFBQWEsQ0FBQTtNQUFBLE9BQUEsSUFBQSxDQUFBLEtBQUEsT0FBQSxTQUFBO0lBQUE7RUFBQSxHQWlDbEI7RUFFRCxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSSxFQUFJO0lBQ3hCLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUM7SUFDeEQsSUFBSSxRQUFRLEVBQUU7TUFDVixRQUFRLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLFVBQUMsQ0FBQyxFQUFLO1FBQ3ZDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUU7VUFDbEIsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRO1VBQ3RDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQztRQUNsQztNQUNKLENBQUMsQ0FBQztJQUNOO0VBQ0osQ0FBQyxDQUFDO0VBRUYsVUFBVSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUM7RUFDbkQsU0FBUyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUM7O0VBRS9DO0VBQ0EsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxVQUFDLENBQUMsRUFBSztJQUNwQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEtBQUssTUFBTSxFQUFFO01BQ3JCLFVBQVUsQ0FBQyxDQUFDO0lBQ2hCO0VBQ0osQ0FBQyxDQUFDO0FBQ04sQ0FBQyxDQUFDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiLyogZmlsZXBhdGg6IC9Vc2Vycy9qZWZmYnVlL1RDR19TSVRFUy9TRU8tVEVBTS9tcmFuYWx5emUuY29tL3dlYnNpdGUvc3JjL2Fzc2V0cy9qcy9yZXBvcnRzLmpzICovXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IGRpYWxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcmNoaXZlLWRpYWxvZycpO1xuICAgIGNvbnN0IGRpYWxvZ1JlcG9ydElkID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RpYWxvZy1yZXBvcnQtaWQnKTtcbiAgICBjb25zdCBjb25maXJtQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbmZpcm0tYXJjaGl2ZS1idG4nKTtcbiAgICBjb25zdCBjYW5jZWxCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FuY2VsLWFyY2hpdmUtYnRuJyk7XG4gICAgY29uc3QgcmVwb3J0SXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucmVwb3J0LWl0ZW0nKTtcblxuICAgIGxldCByZXBvcnRUb0FyY2hpdmUgPSBudWxsO1xuICAgIGxldCBjaGVja2JveFRvVW5jaGVjayA9IG51bGw7XG5cbiAgICBjb25zdCBzaG93RGlhbG9nID0gKHJlcG9ydElkLCBjaGVja2JveCkgPT4ge1xuICAgICAgICByZXBvcnRUb0FyY2hpdmUgPSByZXBvcnRJZDtcbiAgICAgICAgY2hlY2tib3hUb1VuY2hlY2sgPSBjaGVja2JveDtcbiAgICAgICAgZGlhbG9nUmVwb3J0SWQudGV4dENvbnRlbnQgPSByZXBvcnRJZDtcbiAgICAgICAgZGlhbG9nLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XG4gICAgfTtcblxuICAgIGNvbnN0IGhpZGVEaWFsb2cgPSAoKSA9PiB7XG4gICAgICAgIGlmIChjaGVja2JveFRvVW5jaGVjaykge1xuICAgICAgICAgICAgY2hlY2tib3hUb1VuY2hlY2suY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGRpYWxvZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICByZXBvcnRUb0FyY2hpdmUgPSBudWxsO1xuICAgICAgICBjaGVja2JveFRvVW5jaGVjayA9IG51bGw7XG4gICAgfTtcblxuICAgIGNvbnN0IGFyY2hpdmVSZXBvcnQgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGlmICghcmVwb3J0VG9BcmNoaXZlKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgcmVwb3J0SWQgPSByZXBvcnRUb0FyY2hpdmU7XG4gICAgICAgIGNvbnN0IHJlcG9ydEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAucmVwb3J0LWl0ZW1bZGF0YS1yZXBvcnQtaWQ9XCIke3JlcG9ydElkfVwiXWApO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvYXBpL2FuYWx5c2lzL3JlcG9ydC8ke3JlcG9ydElkfWAsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0FyY2hpdmUgc3VjY2Vzc2Z1bDonLCByZXN1bHQubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcG9ydEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVwb3J0RWxlbWVudC5jbGFzc0xpc3QuYWRkKCdhcmNoaXZpbmcnKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBlbGVtZW50IGFmdGVyIHRoZSBhbmltYXRpb24gY29tcGxldGVzXG4gICAgICAgICAgICAgICAgICAgIHJlcG9ydEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignYW5pbWF0aW9uZW5kJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3J0RWxlbWVudC5uZXh0RWxlbWVudFNpYmxpbmcucmVtb3ZlKCk7IC8vIHJlbW92ZSA8YnIvPlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVwb3J0RWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdBcmNoaXZlIGZhaWxlZDonLCByZXN1bHQubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgYWxlcnQoYEVycm9yOiAke3Jlc3VsdC5tZXNzYWdlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignQW4gZXJyb3Igb2NjdXJyZWQ6JywgZXJyb3IpO1xuICAgICAgICAgICAgYWxlcnQoJ0FuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQgd2hpbGUgYXJjaGl2aW5nIHRoZSByZXBvcnQuJyk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBoaWRlRGlhbG9nKCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVwb3J0SXRlbXMuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgY29uc3QgY2hlY2tib3ggPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5hcmNoaXZlLWNoZWNrYm94Jyk7XG4gICAgICAgIGlmIChjaGVja2JveCkge1xuICAgICAgICAgICAgY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXBvcnRJZCA9IGl0ZW0uZGF0YXNldC5yZXBvcnRJZDtcbiAgICAgICAgICAgICAgICAgICAgc2hvd0RpYWxvZyhyZXBvcnRJZCwgZS50YXJnZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25maXJtQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYXJjaGl2ZVJlcG9ydCk7XG4gICAgY2FuY2VsQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGlkZURpYWxvZyk7XG5cbiAgICAvLyBBbHNvIGhpZGUgZGlhbG9nIGlmIGNsaWNraW5nIG9uIHRoZSBvdmVybGF5XG4gICAgZGlhbG9nLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcbiAgICAgICAgaWYgKGUudGFyZ2V0ID09PSBkaWFsb2cpIHtcbiAgICAgICAgICAgIGhpZGVEaWFsb2coKTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7Il19
